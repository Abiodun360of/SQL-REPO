-- 1. Show customers registered in the first six months of 2023 

SELECT COUNT(customer_id) AS registration_count
FROM customers
WHERE registration_date >= '2023-01-01'
AND registration_date <  '2023-07-01';

-- Alternative to show customers registered in the first six months of 2023 
SELECT COUNT(customer_id) AS registration_count
FROM customers
WHERE registration_date >= '2023-01-01'
  AND registration_date <  DATE_ADD('2023-01-01', INTERVAL 6 month);


-- 2 Find the registration count for each month in each year.
select year(registration_date) as registration_year, month(registration_date) as registration_month, count(*) as registration_count
from customers
group by registration_year, registration_month
order by registration_year
  ;

-- 3  A report showing the weekly counts of registration cohorts in 2023 based on the customer channel.
SELECT
  WEEK(registration_date) AS registration_week,
  channel_name,
  COUNT(*) AS registration_count
FROM customers cu
JOIN channels ch
  ON cu.channel_id = ch.id
WHERE registration_date >= '2023-01-01'
  AND registration_date < '2024-01-01'
GROUP BY
  WEEK(registration_date),
  channel_name
ORDER BY WEEK(registration_date);

-- 4 Find the lifetime conversion rate and  conversion rate as a percentage among customers who registered in 2023. Show the result in a column named conversion_rate. Round the result to four decimal places.
SELECT ROUND(COUNT(first_order_id) / COUNT(*), 4) AS conversion_rate
FROM customers
WHERE registration_date >= '2023-01-01'
  AND registration_date <  '2024-01-01';

SELECT ROUND(COUNT(first_order_id) * 100.0 / COUNT(*), 2) AS conversion_rate
FROM customers
WHERE registration_date >= '2023-01-01'
  AND registration_date <  '2024-01-01';

--5 Show customers' emails and interval between their first purchase and the date of registration.
SELECT
  email,
  DATEDIFF(first_order_date, registration_date) AS difference
FROM customers;

-- 6 A report of the average time to first order for weekly registration cohorts from 2023 in each registration channel

SELECT
  WEEK(registration_date) AS week,
  ch.channel_name,
  AVG(DATEDIFF(first_order_date, registration_date)) AS avg_days_to_first_order
FROM customers cu
JOIN channels ch
  ON cu.channel_id = ch.id
WHERE registration_date >= '2023-01-01'
  AND registration_date < '2024-01-01'
GROUP BY
  WEEK(registration_date),
  ch.channel_name
ORDER BY WEEK(registration_date);

-- 7 Find each country's average order value per customer. 
WITH average_per_customer AS (
  SELECT
    c.customer_id,
    country,
    AVG(total_amount) AS avg_order_value
  FROM customers c
  JOIN orders o
    ON c.customer_id = o.customer_id
  GROUP BY
    c.customer_id,
    country
)

SELECT
  country,
  AVG(avg_order_value) AS avg_order_value
FROM average_per_customer
GROUP BY country
ORDER BY AVG(avg_order_value);


--8 Find the percentage of churned customers in monthly signup cohorts.
SELECT
  YEAR(registration_date) AS year,
  MONTH(registration_date) AS month,
  COUNT(customer_id) AS all_customers,
  COUNT(CASE
    WHEN last_order_date > DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY) THEN customer_id
  END) AS churned_customers,
  COUNT(CASE
    WHEN last_order_date > DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY) THEN customer_id
  END) * 100.0 / COUNT(customer_id) AS churned_percentage
FROM customers
GROUP BY
  YEAR(registration_date),
  MONTH(registration_date)
ORDER BY
  YEAR(registration_date),
  MONTH(registration_date);

-- 9 Find the number of "good customers" in weekly signup cohorts from the first quarter of 2023. 

WITH average_total_amount AS (
  SELECT
    c.customer_id,
    registration_date,
    AVG(total_amount) AS average_total_amount
  FROM customers c
  JOIN orders o
    ON c.customer_id = o.customer_id
  WHERE registration_date >= '2023-01-01'
    AND registration_date < '2023-04-01'
  GROUP BY
    c.customer_id,
    registration_date
)

SELECT
  YEAR(registration_date) AS year,
  WEEK(registration_date) AS week,
  COUNT(CASE
    WHEN average_total_amount > 1450 THEN average_total_amount
  END) * 100.0 / COUNT(average_total_amount) AS percent_of_good_customers
FROM average_total_amount
GROUP BY
  YEAR(registration_date),
  WEEK(registration_date)
ORDER BY
  YEAR(registration_date),
  WEEK(registration_date);

-- 10 the percentage of customers still active after 14 days, 30 days, and 60 days

SELECT
  WEEK(registration_date) AS week,
  COUNT(CASE
    WHEN DATEDIFF(last_order_date, registration_date) > 14 THEN customer_id
  END) * 100.0 / COUNT(customer_id) AS active_after_14_days,
  COUNT(CASE
    WHEN DATEDIFF(last_order_date, registration_date) > 30 THEN customer_id
  END) * 100.0 / COUNT(customer_id) AS active_after_30_days,
  COUNT(CASE
    WHEN DATEDIFF(last_order_date, registration_date) > 60 THEN customer_id
  END) * 100.0 / COUNT(customer_id) AS active_after_60_days
FROM customers
WHERE registration_date >= '2024-07-01'
  AND registration_date < '2024-10-01'
GROUP BY WEEK(registration_date)
ORDER BY WEEK(registration_date);

